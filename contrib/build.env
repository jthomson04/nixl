#!/bin/bash

# SPDX-FileCopyrightText: Copyright (c) 2025 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Enable debugging output and strict error handling
set -x  # Print commands and their arguments as they are executed
set +e  # Don't exit immediately if a command exits with non-zero status
set -u  # Treat unset variables as an error when substituting

# Verify script is being sourced rather than executed directly
# This is important because this script is meant to set up environment variables
# and should be sourced using: source build.env
if [ "${BASH_SOURCE[0]}" = "$0" ]; then
    echo "ERROR: This script is not meant to be executed directly"
    exit 1
fi

# Set up core build environment variables
# _NIXL_SCRIPTS_DIR: Absolute path to the directory containing build scripts
_NIXL_SCRIPTS_DIR="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"
export _NIXL_SCRIPTS_DIR

# Build and test configuration variables
# These can be overridden by setting environment variables before sourcing this script
# UCX_VERSION: Version of UCX (Unified Communication X) to build against
export _UCX_VERSION=${UCX_VERSION:-1.18.0}
# UCX_INSTALL_DIR: Installation directory for UCX
export _UCX_INSTALL_DIR=${UCX_INSTALL_DIR:-/opt/nvidia/ucx}
# NIXL_BUILD_DIR: Directory where build artifacts will be stored
export _NIXL_BUILD_DIR=${NIXL_BUILD_DIR:-nixl_build}
# INSTALL_DIR: Final installation directory for NIXL
export _NIXL_INSTALL_DIR=${INSTALL_DIR:-/opt/nvidia/nixl}

# Source the build functions script which contains helper functions for the build process
# This script must be present in the same directory as build.env
if [ ! -f "$_NIXL_SCRIPTS_DIR/build-functions.sh" ]; then
    echo "ERROR: build-functions.sh not found"
    return 1
fi

# Source the build functions and handle any errors during sourcing
# shellcheck disable=SC1091
. "$_NIXL_SCRIPTS_DIR/build-functions.sh" || {
    echo "ERROR: Failed to source build-functions.sh"
    return 1
}
